#####################
# Composant IDECore #
#####################

  ##############
  # Classe IDE #
  ##############

méthode IDE>initsystem

appelée par :

    IDEStarter startIDEFromApp
    IDEStarter startIDEFromDB
    IDEStarter startIDEOnly
    IDEStarter startIDEWithDB

  ##############################
  # Classe IDE::CommentHandler #
  ##############################

superclasse de :

    IDE::Component
    IDE::ProcsGroup
    IDE::TclProcsDescription

Ne possède que les trois méthodes de gestion la variable "comment"
Un commentaire vide est équivalent à une absence de commentaire

    if {[my hasComment]} ...
    set le_commentaire [my getComment]
    my setComment $le_commentaire

Les trois sous-classes possèdent la variable "name"

Arborescence des instances

   (instance_of_IDE::Component)::(instance_of_IDE::ProcsGroup)::(instance_of_IDE::TclProcsDescription)

  ##############################
  # Sous-Classe IDE::Component #
  ##############################

Variables des instances

    comment
    name           Nom du composant, correspond au nom du "package" Tcl
    version        version du "package"
    classes        liste des classes
    objects        liste des objets
    requiredComp   liste des composants requis

Variables de l'objet IDE::Component

    _idemeta   (key-value)  (variable commune à tous les "xotcl::Object")
    components (key-value)  component_name -> instance_of_IDE::Component

méthodes de l'objet "IDE::Component", catégorie "api", appelées dans de nombreux contextes.

    set list_of_component_names   [IDE::Component getComponentNames]
    set list_of_component_objects [[IDE::Component getAllComponents]
    
    set null_or_component_object [IDE::Component getCompObjectForNameIfExists $component_name]
    set component_object [IDE::Component getCompObjectForName $component_name]

Cette dernière méthode crée une instance de "IDE::Component" s'il n'en existe pas une de même nom.
Dans ce cas, la version de l'instance est positionnée à 0.1

  ##############################
  # Sous-Classe IDE::ProcGroup #
  ##############################

Variables des instances

    comment
    name
    defBody          exclusivement "namespace eval $name {...}"
    withNamespace    booléen

Variables de l'objet "IDE::ProcGroup"

    _idemeta
    __defaults       "withNamespace 0"

  ########################################
  # Sous-Classe IDE::TclProcsDescription #
  ########################################

Variables des instances

    comment
    name

La variable "name" contient le nom de la procédure Tcl associée à l'instance.


Variables de l'objet IDE::TclProcsDescription

    _idemeta  (key-value)  (variable commune à tous les "xotcl::Object")
    methodArr (key-value)  proc_name -> instance_of_IDE::TclProcsDescription

##################################################
  
Hiérarchie

    (IDE::CommentsContainer)::(instance_of_IDE::ObjectCommentsContainer)

##################################################

  ################################
  # Objet IDE::CommentsContainer #
  ################################

Variables de l'objet

    _idemeta
    objComments   (key-value) 
    objectHash    liste d'objets ???

  #######################################
  # Classe IDE::ObjectCommentsContainer #
  #######################################

Variables de l'instance

    objectName         (obligatoire)
    comment_Instance   (key-value) instproc_name->commentaire
    comment_Class      (key-value) proc_name->commentaire

Méthodes des instances

    set comment [my getMethodComment Instance $method_name]
    set comment [my getMethodComment Class $method_name]
    if {[my hasMethodComment Instance $method_name]} ...
    if {[my hasMethodComment Class $method_name]} ...
    my getMethodComment Instance $method_name $comment
    my getMethodComment Class $method_name $comment

  ##########################
  # Object IDE::IntroProxy #
  ##########################

  ##############################
  # Objet IDE::SystemConfigMap #
  ##############################





Classe IDE::Component::Tracker

